#!/usr/bin/python3

# Copyright © 2012-2015 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This software incorporates code from bitbucket-distutils[0], written by
# Hong Minhee, and put into the public domain.
#
# [0] https://bitbucket.org/dahlia/bitbucket-distutils

import argparse
import getpass
import logging
import netrc
import os
import re
import sys

import requests

ca_certificate = os.path.join(
    os.path.dirname(os.path.realpath(__file__)),
    'ca.crt'
)

class BitbucketClient(object):
    """Minimal Bitbucket that signs in and uploads files."""

    def __init__(self, username, password, repository):
        self.session = requests.Session()
        self.session.verify = ca_certificate
        self.session.trust_env = False
        self.session.headers['User-Agent'] = 'bitbucket-upload (https://bitbucket.org/jwilk/bitbucket-upload)'
        self.signin(username, password)
        self.repository = repository

    def signin(self, username, password):
        url = 'https://bitbucket.org/account/signin/'
        form = self.session.get(url)
        token = self._find_field(form.text, 'csrfmiddlewaretoken')
        data = {
            'username': username,
            'password': password,
            'csrfmiddlewaretoken': token
        }
        login = self.session.post(url,
            data=data,
            headers={'Referer': url}
        )
        if login.status_code == 200 and '<div>Invalid username/email or password</div>' in login.text:
            login.status_code = 403
        login.raise_for_status()

    def upload(self, filename):
        url = 'https://bitbucket.org/' + self.repository + '/downloads'
        form = self.session.get(url)
        form.raise_for_status()
        crsf_token = self.session.cookies['csrftoken']
        basename = os.path.basename(filename)
        data = dict(
            csrfmiddlewaretoken=crsf_token,
            token='',
        )
        with open(filename, 'rb') as fp:
            files = {'files': (basename, fp)}
            response = self.session.post(url,
                data=data,
                files=files,
                headers={'Referer': url},
                allow_redirects=False, # https://github.com/kennethreitz/requests/issues/1156
            )
        try:
            self.session.get(response.headers['location'])
        finally:
            response.raise_for_status()
        return url + '/' + basename

    def _find_field(self, form_string, name):
        pattern = ''.join((
            r'<input\s[^<>]*name=[\'"]',
            re.escape(name),
            r'[\'"]\s[^>]*>'
        ))
        tag = re.search(pattern, form_string)
        token = re.search(r'value=[\'"]([^\'"]+)[\'"]', tag.group(0))
        return token.group(1)

    def signout(self):
        url = 'https://bitbucket.org/account/signout/'
        response = self.session.get(url)
        response.raise_for_status()

def log_begin(s):
    print(s, end=' ... ')
    sys.stdout.flush()

def log_done(s='done'):
    print(s)

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('-u', '--user', metavar='<user>')
    ap.add_argument('-p', '--password', metavar='<password>')
    ap.add_argument('--netrc', action='store_true')
    ap.add_argument('-R', '--repository', metavar='<repository>', required=True)
    ap.add_argument('--debug', action='store_true')
    ap.add_argument('files', metavar='<file>', nargs='+')
    options = ap.parse_args()
    if int(requests.__version__.split('.')[0]) < 1:
        raise NotImplementedError('requests >= 1.0 is required')
    if options.debug:
        logging.basicConfig()
        for mod in ['urllib3', 'requests.packages.urllib3']:
            logger = logging.getLogger(mod)
            logger.setLevel(logging.DEBUG)
            logger.propagate = True
    if options.netrc:
        authinfo = netrc.netrc().authenticators('bitbucket.org')
        if authinfo is None:
            ap.error('missing netrc entry for bitbucket.org')
        (user, _, password) = authinfo
        if (options.user is not None) and (user != options.user):
            ap.error('netrc user mismatch: {} != {}'.format(user, options.user))
        options.user = user
        options.password = password
    if options.user is None:
        options.user = getpass.getuser()
    if options.password is None:
        options.password = getpass.getpass('Bitbucket password for {}: '.format(options.user))
    if '/' not in options.repository:
        log_begin('setting repository to {}'.format(options.repository))
        options.repository = '{o.user}/{o.repository}'.format(o=options)
        log_done()
    log_begin('logging in as {}'.format(options.user))
    client = BitbucketClient(options.user, options.password, options.repository)
    log_done()
    for filename in options.files:
        log_begin('uploading {}'.format(filename))
        url = client.upload(filename)
        log_done(url)
    log_begin('logging out'.format(options.user))
    client.signout()
    log_done()

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
