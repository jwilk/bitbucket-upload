#!/usr/bin/python3

# Copyright © 2012-2015 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This software incorporates code from bitbucket-distutils[0], written by
# Hong Minhee, and put into the public domain.
#
# [0] https://bitbucket.org/dahlia/bitbucket-distutils

import argparse
import collections
import getpass
import http.client
import io
import os
import random
import re
import ssl
import string
import subprocess as ipc
import sys
import urllib.request

ca_certificate = os.path.join(
    os.path.dirname(os.path.realpath(__file__)),
    'ca.crt'
)

user_agent = 'bitbucket-upload (https://bitbucket.org/jwilk/bitbucket-upload)'

class LoginError(RuntimeError):
    pass

class BitbucketClient(object):

    def __init__(self, username, password, repository):
        tls_context = ssl.create_default_context(cafile=ca_certificate)
        self._url_opener = urllib.request.build_opener(
            urllib.request.HTTPCookieProcessor,
            urllib.request.HTTPSHandler(context=tls_context),
        )
        self.signin(username, password)
        self.repository = repository

    def get(self, url, encoding=None):
        request = urllib.request.Request(url, headers={'User-Agent': user_agent})
        with self._url_opener.open(request) as fp:
            data = fp.read()
        if encoding is not None:
            data = data.decode(encoding)
        return data

    def post(self, url, data=None, headers=None, files=False, encoding=None):
        headers = dict(headers or ())
        headers['User-Agent'] = user_agent
        data = data or {}
        files = files or {}
        if files:
            boundary = ''.join(random.choice(string.ascii_lowercase) for x in range(16))
            fp = io.BytesIO()
            for fldname, value in data.items():
                fp.write(b'--' +  boundary.encode() + b'\r\n')
                fp.write(b'Content-Disposition: form-data; name="' + fldname.encode('ASCII') + b'"\r\n')
                fp.write(b'\r\n')
                if isinstance(value, str):
                    value = value.encode('ASCII')
                fp.write(value)
                fp.write(b'\r\n')
            for fldname, (filename, value) in files.items():
                fp.write(b'--' +  boundary.encode() + b'\r\n')
                fp.write(b'Content-Disposition: form-data; name="' + fldname.encode('ASCII') + b'"; filename="' + filename.encode('ASCII') + b'"\r\n')
                fp.write(b'Content-Type: application/octet-stream\r\n')
                fp.write(b'\r\n')
                fp.write(value)
                fp.write(b'\r\n')
            fp.write(b'--' +  boundary.encode() + b'--\r\n')
            data = fp.getvalue()
            headers['Content-Type'] = 'multipart/form-data; boundary=' + boundary
        else:
            data = urllib.parse.urlencode(data)
            data = data.encode('ASCII')
        request = urllib.request.Request(url, headers=headers, data=data)
        with self._url_opener.open(request) as fp:
            data = fp.read()
        if encoding is not None:
            data = data.decode(encoding)
        return data

    def signin(self, username, password):
        url = 'https://bitbucket.org/account/signin/'
        form = self.get(url, encoding='UTF-8')
        csrf_token = self._find_field(form, 'csrfmiddlewaretoken')
        data = {
            'username': username,
            'password': password,
            'csrfmiddlewaretoken': csrf_token
        }
        login = self.post(url,
            data=data,
            headers={'Referer': url},
            encoding='UTF-8'
        )
        if '<div id="error"' in login:
            raise LoginError
        if '<div id="js-global-login-error-container"' in login:
            raise LoginError

    def upload(self, filename):
        url = 'https://bitbucket.org/' + self.repository + '/downloads'
        form = self.get(url, encoding='UTF-8')
        csrf_token = self._find_field(form, 'csrfmiddlewaretoken')
        basename = os.path.basename(filename)
        data = dict(
            csrfmiddlewaretoken=csrf_token,
            token='',
        )
        with open(filename, 'rb') as fp:
            contents = fp.read()
        self.post(url,
            data=data,
            files=dict(files=(basename, contents)),
            headers={'Referer': url},
        )
        return url + '/' + basename

    def _find_field(self, form_string, name):
        pattern = ''.join((
            r'<input\s[^<>]*name=[\'"]',
            re.escape(name),
            r'[\'"]\s[^>]*>'
        ))
        tag = re.search(pattern, form_string)
        token = re.search(r'value=[\'"]([^\'"]+)[\'"]', tag.group(0))
        return token.group(1)

    def signout(self):
        url = 'https://bitbucket.org/account/signout/'
        self.get(url)

def log_begin(s):
    print(s, end=' ... ')
    sys.stdout.flush()

def log_done(s='done'):
    print(s)

def get_hg_password(expected_user):
    try:
        hg = ipc.Popen(['hg', 'config', 'auth'], stdout=ipc.PIPE)
    except OSError:
        return (None, None)
    (stdout, stderr) = hg.communicate()
    if hg.wait() != 0:
        return (None, None)
    stdout = stdout.decode('ASCII')
    config = collections.defaultdict(dict)
    for line in stdout.splitlines():
        line = line.rstrip('\n')
        key, value = line.split('=', 1)
        group, key = key.rsplit('.', 1)
        if value:
            config[group][key] = value
    best_rank = 0
    best_auth = (None, None)
    for auth in config.values():
        if expected_user is not None:
            if auth.get('username', expected_user) != expected_user:
                continue
        prefix = auth.get('prefix')
        if not prefix:
            continue
        if '://' in prefix:
            scheme, prefix = prefix.split('://', 1)
            if scheme != 'https':
                continue
        else:
            schemes = auth.get('schemes', 'https').split()
            if 'https' not in schemes:
                continue
        rank = 2 * len(prefix) + ('username' in auth)
        if rank <= best_rank:
            continue
        if prefix == '*':
            pass
        elif 'bitbucket.org/'.startswith(prefix):
            pass
        else:
            continue
        best_rank = rank
        best_auth = (auth.get('username'), auth.get('password'))
    return best_auth

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('-u', '--user', metavar='<user>')
    ap.add_argument('-p', '--password', metavar='<password>')
    ap.add_argument('-R', '--repository', metavar='<repository>', required=True)
    ap.add_argument('--debug', action='store_true')
    ap.add_argument('files', metavar='<file>', nargs='+')
    options = ap.parse_args()
    if options.debug:
        http.client.HTTPConnection.debuglevel = 1
    if options.password is None:
        (options.user, options.password) = get_hg_password(options.user)
    if options.user is None:
        options.user = getpass.getuser()
    if options.password is None:
        options.password = getpass.getpass('Bitbucket password for {}: '.format(options.user))
    if '/' not in options.repository:
        log_begin('setting repository to {}'.format(options.repository))
        options.repository = '{o.user}/{o.repository}'.format(o=options)
        log_done()
    log_begin('logging in as {}'.format(options.user))
    client = BitbucketClient(options.user, options.password, options.repository)
    log_done()
    for filename in options.files:
        log_begin('uploading {}'.format(filename))
        url = client.upload(filename)
        log_done(url)
    log_begin('logging out')
    client.signout()
    log_done()

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
